services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - tp1_net
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 10

{% for i in range(1, filter_nodes_2000s + 1) %}
  2000s-filter-{{ i }}:
    container_name: 2000s-filter-{{ i }}
    image: filter:latest
    environment:
      - FILTER_TYPE=2000s_filter
      - FILTER_NUM={{ i }}
      - SHARDS={{ shards }}
    networks:
      - tp1_net
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
#    tmpfs:
#      - /tmp/states
    volumes:
      - /tmp/states:/tmp/states
    depends_on:
{% for i in range(1, ar_es_filter_nodes + 1) %}
      ar-es-filter-{{ i }}:
        condition: service_healthy
{%- endfor -%}
{% for i in range(1, ar_filter_nodes + 1) %}
      ar-filter-{{ i }}:
        condition: service_healthy
{%- endfor -%}
{% endfor %}

{% for i in range(1, ar_es_filter_nodes + 1) %}
  ar-es-filter-{{ i }}:
    container_name: ar-es-filter-{{ i }}
    image: filter:latest
    environment:
      - FILTER_TYPE=ar_es_filter
      - FILTER_NUM={{ i }}
      - SHARDS={{ shards }}
      - FILTER_NODES={{ ar_es_filter_nodes }}
      - NODE_NAME=ar-es-filter-{{ i }}
    networks:
      - tp1_net
    depends_on:
      aggregator_movies:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states
{% endfor %}

{% for i in range(1, ar_filter_nodes + 1) %}
  ar-filter-{{ i }}:
    container_name: ar-filter-{{ i }}
    image: filter:latest
    environment:
      - FILTER_TYPE=ar_filter
      - FILTER_NUM={{ i }}
      - SHARDS={{ shards }}
      - FILTER_NODES={{ ar_filter_nodes }}
      - NODE_NAME=ar-filter-{{ i }}
    networks:
      - tp1_net
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states
    depends_on:
{% for i in range(1, shards + 1) %}
      joiner_group_by_movie_id_credits-{{ i }}:
        condition: service_healthy
      joiner_group_by_movie_id_ratings-{{ i }}:
        condition: service_healthy
{%- endfor %}
{% endfor %}

{% for i in range(1, single_country_origin_filter_nodes + 1) %}
  single-country-origin-filter-{{ i }}:
    container_name: single-country-origin-filter-{{ i }}
    image: filter:latest
    environment:
      - FILTER_TYPE=single_country_origin_filter
      - FILTER_NUM={{ i }}
      - SHARDS={{ shards }}
      - FILTER_NODES={{ single_country_origin_filter_nodes }}
      - NODE_NAME=single-country-origin-filter-{{ i }}
    networks:
      - tp1_net
    depends_on:
      aggregator_top_5:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states
{% endfor %}

{% for i in range(1, shards + 1) %}
  joiner_group_by_movie_id_ratings-{{ i }}:
    container_name: joiner_group_by_movie_id_ratings-{{ i }}
    image: joiner:latest
    environment:
      - JOINER_TYPE=group_by_movie_id_ratings
      - JOINER_ID={{ i }}
      - JOINER_INPUT_QUEUE_BASE_NAME=ar_movies_2000_and_later
      - JOINER_INPUT_QUEUE_SEC_NAME=ratings_{{ i }}
      - JOINER_OUTPUT_QUEUE_NAME=movies_top_and_bottom
    networks:
      - tp1_net
    depends_on:
      aggregator_top_and_bottom:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states
{% endfor %}

{% for i in range(1, shards + 1) %}
  joiner_group_by_movie_id_credits-{{ i }}:
    container_name: joiner_group_by_movie_id_credits-{{ i }}
    image: joiner:latest
    environment:
      - JOINER_TYPE=group_by_movie_id_credits
      - JOINER_ID={{ i }}
      - JOINER_INPUT_QUEUE_BASE_NAME=ar_movies_after_2000
      - JOINER_INPUT_QUEUE_SEC_NAME=credits_{{ i }}
      - JOINER_OUTPUT_QUEUE_NAME=actor_movies_count
    networks:
      - tp1_net
    depends_on:
      aggregator_top_10:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states
{% endfor %}

  aggregator_movies:
    container_name: aggregator_movies
    image: aggregator:latest
    environment:
      - AGGREGATOR_TYPE=movies
      - AGGREGATOR_ID=1
      - AGGREGATOR_AMOUNT_SOURCES=1
      - AGGREGATOR_INPUT_QUEUE_NAME=movies_ar_es_2000s
      - AGGREGATOR_OUTPUT_QUEUE_NAME=movies_report
    networks:
      - tp1_net
    depends_on:
      report:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

  aggregator_top_5:
    container_name: aggregator_top_5
    image: aggregator:latest
    environment:
      - AGGREGATOR_TYPE=top_5
      - AGGREGATOR_ID=2
      - AGGREGATOR_AMOUNT_SOURCES=1
      - AGGREGATOR_INPUT_QUEUE_NAME=single_country_origin_movies
      - AGGREGATOR_OUTPUT_QUEUE_NAME=top_5_report
    networks:
      - tp1_net
    depends_on:
      report:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

  aggregator_top_10:
    container_name: aggregator_top_10
    image: aggregator:latest
    environment:
      - AGGREGATOR_TYPE=top_10
      - AGGREGATOR_ID=3
      - AGGREGATOR_AMOUNT_SOURCES={{ shards }}
      - AGGREGATOR_INPUT_QUEUE_NAME=actor_movies_count
      - AGGREGATOR_OUTPUT_QUEUE_NAME=top_10_report
    networks:
      - tp1_net
    depends_on:
      report:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

  aggregator_top_and_bottom:
    container_name: aggregator_top_and_bottom
    image: aggregator:latest
    environment:
      - AGGREGATOR_TYPE=top_and_bottom
      - AGGREGATOR_ID=4
      - AGGREGATOR_AMOUNT_SOURCES={{ shards }}
      - AGGREGATOR_INPUT_QUEUE_NAME=movies_top_and_bottom
      - AGGREGATOR_OUTPUT_QUEUE_NAME=top_and_bottom_report
    networks:
      - tp1_net
    depends_on:
      report:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

  aggregator_metrics:
    container_name: aggregator_metrics
    image: aggregator:latest
    environment:
      - AGGREGATOR_TYPE=metrics
      - AGGREGATOR_ID=5
      - AGGREGATOR_AMOUNT_SOURCES=1
      - AGGREGATOR_INPUT_QUEUE_NAME=negative_movies
      - AGGREGATOR_INPUT_QUEUE_SEC_NAME=positive_movies
      - AGGREGATOR_OUTPUT_QUEUE_NAME=metrics_report
    networks:
      - tp1_net
    depends_on:
      report:
        condition: service_healthy
    links:
      - rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

{% for i in range(1, nlp_nodes + 1) %}
  nlp-{{ i }}:
    container_name: nlp-{{ i }}
    image: nlp:latest
    environment:
      - NODE_NUM={{ i }}
      - SHARDS={{ shards }}
      - NLP_NODES={{ nlp_nodes }}
      - NODE_NAME=nlp-{{ i }}
    networks:
      - tp1_net
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./nlp-cache:/app/cache
      - /tmp/states:/tmp/states
{% endfor %}

  controller:
    container_name: controller
    image: controller:latest
    build:
      context: .
      dockerfile: src/server/gateway/Dockerfile
    environment:
      - SHARDS={{ shards }}
    networks:
      - tp1_net
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
{%- for i in range(1, filter_nodes_2000s + 1) %}
      2000s-filter-{{ i }}:
        condition: service_healthy
{%- endfor -%}
{% for i in range(1, single_country_origin_filter_nodes + 1) %}
      single-country-origin-filter-{{ i }}:
        condition: service_healthy
{%- endfor -%}
{% for i in range(1, shards + 1) %}
      joiner_group_by_movie_id_credits-{{ i }}:
        condition: service_healthy
      joiner_group_by_movie_id_ratings-{{ i }}:
        condition: service_healthy
{%- endfor -%}
{% for i in range(1, nlp_nodes + 1) %}
      nlp-{{ i }}:
        condition: service_started
{%- endfor %}

{% for i in range(1, client_nodes + 1) %}
  client-{{ i }}:
    container_name: client-{{ i }}
    image: client:latest
    build:
      context: .
      dockerfile: src/client/Dockerfile
    networks:
      - tp1_net
    depends_on:
      controller:
        condition: service_healthy
    volumes:
      - ./src/client/datasets:/app/datasets
      - ./reports:/app
      - /tmp/states:/tmp/states
    entrypoint: /client
    command:
      - /app/datasets/movies.csv
      - /app/datasets/ratings.csv
      - /app/datasets/credits.csv
{% endfor %}

  report:
    build:
      context: .
      dockerfile: src/server/report/Dockerfile
    container_name: report
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - tp1_net
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /tmp/states:/tmp/states

  resilience_manager:
    container_name: resilience_manager
    image: resilience_manager:latest
    build:
      context: .
      dockerfile: src/server/resilience_manager/Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/states:/tmp/states
    networks:
      - tp1_net
    depends_on:
      controller:
        condition: service_healthy
    environment:
      - RESILIENCE_CHECK_INTERVAL=5
      - RESILIENCE_UNHEALTHY_THRESHOLD=3
      - RESILIENCE_RESTART_WAIT=15
      - HEALTH_ENDPOINT=/ping
{% for i in range(1, filter_nodes_2000s + 1) %}
      - MONITOR_SERVICE_FILTER_{{ i }}=2000s-filter-{{ i }}
{%- endfor %}
{% for i in range(1, ar_es_filter_nodes + 1) %}
      - MONITOR_SERVICE_FILTER_{{ filter_nodes_2000s + i }}=ar-es-filter-{{ i }}
{%- endfor %}
{% for i in range(1, ar_filter_nodes + 1) %}
      - MONITOR_SERVICE_FILTER_{{ ar_es_filter_nodes + filter_nodes_2000s + i }}=ar-filter-{{ i }}
{%- endfor %}
{% for i in range(1, single_country_origin_filter_nodes + 1) %}
      - MONITOR_SERVICE_FILTER_{{ ar_filter_nodes + ar_es_filter_nodes + filter_nodes_2000s + i }}=single-country-origin-filter-{{ i }}
{%- endfor %}
{% for i in range(1, nlp_nodes + 1) %}
      - MONITOR_SERVICE_FILTER_{{ single_country_origin_filter_nodes + ar_filter_nodes + ar_es_filter_nodes + filter_nodes_2000s + i }}=nlp-{{ i }}
{%- endfor %}
{% for i in range(1, shards + 1) %}
      - MONITOR_SERVICE_JOINER_{{ i }}=joiner_group_by_movie_id_ratings-{{ i }}
{%- endfor %}
{% for i in range(1, shards + 1) %}
      - MONITOR_SERVICE_JOINER_{{ shards + i }}=joiner_group_by_movie_id_credits-{{ i }}
{%- endfor %}
      - MONITOR_SERVICE_AGGREGATOR_1=aggregator_movies
      - MONITOR_SERVICE_AGGREGATOR_2=aggregator_top_5
      - MONITOR_SERVICE_AGGREGATOR_3=aggregator_top_10
      - MONITOR_SERVICE_AGGREGATOR_4=aggregator_top_and_bottom
      - MONITOR_SERVICE_AGGREGATOR_5=aggregator_metrics

      - MONITOR_SERVICE_CONTROLLER_1=controller
      - MONITOR_SERVICE_REPORT_1=report
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8081/ping | grep -q pong" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  tp1_net:
    ipam:
      driver: default
      config:
        - subnet: 172.25.125.0/24
