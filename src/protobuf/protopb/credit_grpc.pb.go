// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: credit.proto

package protopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditService_StreamCredits_FullMethodName = "/CreditService/StreamCredits"
)

// CreditServiceClient is the client API for CreditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditServiceClient interface {
	StreamCredits(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Credit, emptypb.Empty], error)
}

type creditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditServiceClient(cc grpc.ClientConnInterface) CreditServiceClient {
	return &creditServiceClient{cc}
}

func (c *creditServiceClient) StreamCredits(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Credit, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CreditService_ServiceDesc.Streams[0], CreditService_StreamCredits_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Credit, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CreditService_StreamCreditsClient = grpc.ClientStreamingClient[Credit, emptypb.Empty]

// CreditServiceServer is the server API for CreditService service.
// All implementations must embed UnimplementedCreditServiceServer
// for forward compatibility.
type CreditServiceServer interface {
	StreamCredits(grpc.ClientStreamingServer[Credit, emptypb.Empty]) error
	mustEmbedUnimplementedCreditServiceServer()
}

// UnimplementedCreditServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditServiceServer struct{}

func (UnimplementedCreditServiceServer) StreamCredits(grpc.ClientStreamingServer[Credit, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCredits not implemented")
}
func (UnimplementedCreditServiceServer) mustEmbedUnimplementedCreditServiceServer() {}
func (UnimplementedCreditServiceServer) testEmbeddedByValue()                       {}

// UnsafeCreditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditServiceServer will
// result in compilation errors.
type UnsafeCreditServiceServer interface {
	mustEmbedUnimplementedCreditServiceServer()
}

func RegisterCreditServiceServer(s grpc.ServiceRegistrar, srv CreditServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditService_ServiceDesc, srv)
}

func _CreditService_StreamCredits_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CreditServiceServer).StreamCredits(&grpc.GenericServerStream[Credit, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CreditService_StreamCreditsServer = grpc.ClientStreamingServer[Credit, emptypb.Empty]

// CreditService_ServiceDesc is the grpc.ServiceDesc for CreditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreditService",
	HandlerType: (*CreditServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCredits",
			Handler:       _CreditService_StreamCredits_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "credit.proto",
}
